- name: Automatically build Execution Environments for Ansible Automation Platform
  hosts: localhost
  become: true

  vars:
    container_registries:
      - registry.redhat.io
      - console.redhat.com
      - registry.access.redhat.com
      - quay.io
      - registry.connect.redhat.com
    dns_servers:
      - '8.8.8.8'
      - '8.8.4.4'
    required_packages:
      - python3-pip
      - ansible-core
      - git
      - podman
      - ansible-dev-tools
      - podman-docker
      - podman-compose
      - podman-plugins
      - podman-remote
      - tmux
      - yum-utils
    git_repos:
      - url: 'https://github.com/cloin/ee-builds.git'
        dest: 'scripts/ee-builds'
      # This repository does not exist, let's comment it out to avoid errors
      # - url: 'https://github.com/nickarellano/ee-container.git'
      #   dest: 'scripts/ee-container'
    work_dir: '/tmp/ee-containers'

  vars_prompt:
    - name: rh_username
      prompt: "Enter your Red Hat CDN username"
      private: false
    - name: rh_password
      prompt: "Enter your Red Hat CDN password"
      private: true
    - name: automation_hub_token
      prompt: "Enter your Automation Hub token from https://console.redhat.com/ansible/automation-hub/token (or press enter to skip)"
      private: true
    - name: galaxy_token
      prompt: "Enter your Galaxy token from https://galaxy.ansible.com/ui/token (or press enter to skip)"
      private: true
      default: ""

  pre_tasks:
    - name: Include setup tasks
      ansible.builtin.include_tasks: tasks/setup.yml
      register: setup_result

  tasks:
    - name: Ensure tmux is installed
      ansible.builtin.package:
        name: tmux
        state: present

    - name: Check if tmux session exists
      ansible.builtin.command:
        cmd: tmux has-session -t podman_watch
      register: tmux_session_check
      failed_when: false
      changed_when: false

    - name: Start tmux session and run watch command
      ansible.builtin.command:
        cmd: tmux new-session -d -s podman_watch 'watch -n .5 podman images'
      when: tmux_session_check.rc != 0
      async: 1
      poll: 0
      changed_when: false

    - name: Check if already logged in to container registries
      ansible.builtin.command:
        cmd: "podman login --get-login {{ item }}"
      loop: "{{ container_registries }}"
      register: login_check_result
      failed_when: false
      changed_when: false

    - name: Log in to container registries if not already logged in
      ansible.builtin.shell: "echo {{ rh_password }} | podman login -u {{ rh_username }} --password-stdin {{ item }}"
      loop: "{{ container_registries }}"
      when: login_check_result.results[loop.index0].rc != 0 and login_check_result.results[loop.index0].stdout != rh_username
      register: login_result
      no_log: true
      failed_when: login_result.rc != 0
      changed_when: login_result.rc == 0
      ignore_errors: true

    - name: Check if required container images exist
      ansible.builtin.command:
        cmd: "podman image exists {{ item }}"
      loop:
        - registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel8
        - registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel9
        - registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8
        - registry.redhat.io/ansible-automation-platform-25/de-supported-rhel9
        - registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8
        - registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel9
        - registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8
        - registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel9
      register: image_check_results
      changed_when: false
      failed_when: false

    - name: Pull missing container images
      ansible.builtin.command:
        cmd: "podman pull {{ item.item }}"
      loop: "{{ image_check_results.results }}"
      when: item.rc is defined and item.rc != 0
      register: pull_results
      changed_when: "'Downloaded newer image' in pull_results.stdout | default('')"
      retries: 3
      delay: 5
      until: pull_results is succeeded
      ignore_errors: true
      loop_control:
        loop_var: item

    - name: Clean up unused images and build artifacts
      block:
        - name: Include cleanup tasks
          ansible.builtin.include_tasks: tasks/cleanup.yml
      rescue:
        - name: Handle cleanup failure
          ansible.builtin.debug:
            msg: "Image cleanup failed: {{ ansible_failed_result.stderr | default('Unknown error') }}"

    - name: Check if requirements.txt exists
      ansible.builtin.stat:
        path: /tmp/ee-containers/files/requirements.txt
      register: requirements_txt

    - name: Install Python packages from requirements.txt if it exists
      ansible.builtin.pip:
        requirements: /tmp/ee-containers/files/requirements.txt
      when: requirements_txt.stat.exists
      register: pip_install_result
      failed_when: pip_install_result is failed

    - name: Check if requirements.yml exists
      ansible.builtin.stat:
        path: /tmp/ee-containers/files/requirements.yml
      register: requirements_yml

    - name: Check if ansible-galaxy collections are already installed
      ansible.builtin.command:
        cmd: ansible-galaxy collection list -r /tmp/ee-containers/files/requirements.yml
      when: requirements_yml.stat.exists
      register: galaxy_list_result
      failed_when: false
      changed_when: false

    - name: Install ansible-galaxy collections from requirements.yml if not already installed
      ansible.builtin.command:
        cmd: ansible-galaxy collection install -r /tmp/ee-containers/files/requirements.yml
      when: requirements_yml.stat.exists and galaxy_list_result.stdout.find('No collections found') != -1
      register: galaxy_install_result
      changed_when: galaxy_install_result.stdout.find('No collections found') != -1
      failed_when: galaxy_install_result.rc != 0
      ignore_errors: true

    - name: Ensure /tmp/ee-containers/_build/configs directory exists
      ansible.builtin.file:
        path: /tmp/ee-containers/_build/configs
        state: directory
        mode: '0755'

    - name: Create ansible.cfg in /tmp/ee-containers/_build/configs
      ansible.builtin.copy:
        src: /home/sgallego/ee-containers/ansible.cfg
        dest: /tmp/ee-containers/_build/configs/ansible.cfg
        mode: '0644'

    - name: Copy ansible.cfg to build context
      ansible.builtin.copy:
        src: /tmp/ee-containers/_build/configs/ansible.cfg
        dest: /etc/ansible/ansible.cfg
        mode: '0644'
        remote_src: true
      become: true

    - name: Verify DNS resolution
      ansible.builtin.command:
        cmd: "nslookup {{ item }}"
      loop:
        - github.com
        - cdn-ubi.redhat.com
        - galaxy.ansible.com
      register: dns_checks
      changed_when: false
      failed_when: false

    - name: Set DNS servers for Podman
      ansible.builtin.template:
        src: templates/registries.conf.j2
        dest: /etc/containers/registries.conf
        mode: '0644'

    - name: Include environment menu tasks
      ansible.builtin.include_tasks: tasks/environment_menu.yml
      register: environment_menu_result

    - name: Process each selected environment
      block:
        - name: Ensure build directories exist
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
          loop:
            - "{{ work_dir }}/files"
            - "{{ work_dir }}/_build"
            - "{{ work_dir }}/context"

        - name: Set correct ownership for build directories
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            recurse: true
            owner: "{{ ansible_user_id }}"
            group: "{{ ansible_user_id }}"
          loop:
            - "{{ work_dir }}/files"
            - "{{ work_dir }}/_build"
            - "{{ work_dir }}/context"
          become: true

      rescue:
        - name: Display build error
          ansible.builtin.debug:
            msg: |
              Build failed for {{ current_env | default('unknown') }}:
              STDOUT:
              {{ build_output.stdout_lines | default([]) | to_nice_yaml }}
              STDERR:
              {{ build_output.stderr_lines | default([]) | to_nice_yaml }}

      always:
        - name: Clean up build directories
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ work_dir }}/_build"
            - "{{ work_dir }}/context"
          failed_when: false

    - name: Include build environment tasks
      ansible.builtin.include_tasks: tasks/build_environment.yml
      loop: "{{ selected_environments | default([]) }}"
      loop_control:
        loop_var: current_env
        label: "{{ current_env }}"
