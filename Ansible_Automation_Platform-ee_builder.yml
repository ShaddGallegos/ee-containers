- name: Build Execution Environments for Ansible Automation Platform
  hosts: localhost
  become: true
  gather_facts: true  # Ensure we have facts for ansible_env variables

  vars:
    container_registries:
      - registry.redhat.io
      - console.redhat.com
      - registry.access.redhat.com
      - quay.io
      - registry.connect.redhat.com
    dns_servers:
      - '8.8.8.8'
      - '8.8.4.4'
    required_packages:
      - python3-pip
      - ansible-core
      - git
      - podman
      - ansible-dev-tools
      - podman-docker
      - podman-compose
      - podman-plugins
      - podman-remote
      - tmux
      - yum-utils
    git_repos:
      - url: 'https://github.com/cloin/ee-builds.git'
        dest: 'scripts/ee-builds'
      # This repository does not exist, let's comment it out to avoid errors
      # - url: 'https://github.com/nickarellano/ee-container.git'
      #   dest: 'scripts/ee-container'
    work_dir: '/tmp/ee-containers'
    required_images:
      - registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel8
      - registry.redhat.io/ansible-automation-platform-25/de-minimal-rhel9
      - registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8
      - registry.redhat.io/ansible-automation-platform-25/de-supported-rhel9
      - registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8
      - registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel9
      - registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8
      - registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel9

  vars_prompt:
    - name: rh_username
      prompt: "Enter your Red Hat CDN username"
      private: false
    - name: rh_password
      prompt: "Enter your Red Hat CDN password"
      private: true
    - name: automation_hub_token
      prompt: "Enter your Automation Hub token from https://console.redhat.com/ansible/automation-hub/token (or press enter to skip)"
      private: true
    - name: galaxy_token
      prompt: "Enter your Galaxy token from https://galaxy.ansible.com/ui/token (or press enter to skip)"
      private: true
      default: ""

  pre_tasks:
    - name: Include setup tasks
      ansible.builtin.include_tasks: tasks/setup.yml
      register: setup_result

  tasks:
    # Monitor podman activity via tmux
    - name: Ensure tmux is installed
      ansible.builtin.package:
        name: tmux
        state: present

    - name: Check if tmux session exists
      ansible.builtin.command:
        cmd: tmux has-session -t podman_watch
      register: tmux_session_check
      failed_when: false
      changed_when: false

    - name: Start tmux session for monitoring podman images
      ansible.builtin.command:
        cmd: tmux new-session -d -s podman_watch 'watch -n .5 podman images'
      when: tmux_session_check.rc != 0
      changed_when: true
      async: 1
      poll: 0

    # Registry authentication
    - name: Check if already logged in to container registries
      ansible.builtin.command:
        cmd: "podman login --get-login {{ item }}"
      loop: "{{ container_registries }}"
      register: login_check_result
      failed_when: false
      changed_when: false
#      no_log: true  # Avoid leaking credentials in output

    - name: Verify registry authentication
      ansible.builtin.debug:
        msg: "Registry {{ item.0 }} authentication status: {{ 'Successful' if item.1.rc == 0 else 'Failed' }}"
      loop: "{{ container_registries | zip(login_check_result.results) | list }}"
      loop_control:
        label: "{{ item.0 }}"

    # Log in to registries that need authentication
    - name: Ensure registry login is working
      ansible.builtin.include_tasks: tasks/login_registry.yml

    # Image management - Check what we have and get what we need
    - name: Check if required container images exist
      ansible.builtin.command:
        cmd: "podman image exists {{ item }}"
      loop: "{{ required_images }}"
      register: image_check_results
      changed_when: false
      failed_when: false
      loop_control:
        label: "{{ item }}"

    - name: Pull missing container images
      ansible.builtin.command:
        cmd: "podman pull {{ item.item }}"
      loop: "{{ image_check_results.results }}"
      when: item.rc is defined and item.rc != 0
      register: pull_results
      changed_when: pull_results.rc == 0
      retries: 3
      delay: 5
      until: pull_results is succeeded or pull_results is failed
      ignore_errors: true
      loop_control:
        loop_var: item
        label: "{{ item.item }}"

    - name: Verify container images were pulled
      ansible.builtin.command:
        cmd: "podman image exists {{ item }}"
      loop: "{{ required_images }}"
      register: image_verify_results
      changed_when: false
      failed_when: false
      ignore_errors: true
      loop_control:
        label: "{{ item }}"

    - name: Warning about missing container images
      ansible.builtin.debug:
        msg: |
          WARNING: Some required container images are missing. This will cause builds to fail.
          Missing images: {{ image_verify_results.results | selectattr('rc', 'ne', 0) | map(attribute='item') | list | join(', ') }}

          Please check your Red Hat Registry credentials and ensure you have access to these images.
          You may need to:
          1. Register with subscription-manager
          2. Attach a valid subscription
          3. Verify your registry service account at https://access.redhat.com/terms-based-registry/
      when: image_verify_results.results | selectattr('rc', 'ne', 0) | list | length > 0

    # Cleanup unused/old resources
    - name: Clean up unused images and build artifacts
      block:
        - name: Include cleanup tasks
          ansible.builtin.include_tasks: tasks/cleanup.yml
      rescue:
        - name: Handle cleanup failure
          ansible.builtin.debug:
            msg: "Image cleanup failed: {{ ansible_failed_result.stderr | default('Unknown error') }}"

    # Dependency management
    - name: Check if requirements.txt exists
      ansible.builtin.stat:
        path: "{{ work_dir }}/files/requirements.txt"
      register: requirements_txt

    - name: Install Python packages from requirements.txt
      ansible.builtin.pip:
        requirements: "{{ work_dir }}/files/requirements.txt"
        extra_args: "--upgrade"
      when: requirements_txt.stat.exists
      register: pip_install_result
      retries: 3
      delay: 5
      until: pip_install_result is succeeded
      failed_when: false

    - name: Check if requirements.yml exists
      ansible.builtin.stat:
        path: "{{ work_dir }}/files/requirements.yml"
      register: requirements_yml

    - name: Check if ansible-galaxy collections need to be installed
      ansible.builtin.command:
        cmd: ansible-galaxy collection list -r {{ work_dir }}/files/requirements.yml
      when: requirements_yml.stat.exists
      register: galaxy_list_result
      failed_when: false
      changed_when: false

    - name: Install ansible-galaxy collections
      ansible.builtin.command:
        cmd: ansible-galaxy collection install -r {{ work_dir }}/files/requirements.yml
      when: >
        requirements_yml.stat.exists and
        (galaxy_list_result.stdout.find('No collections found') != -1 or galaxy_install_force | default(false))
      register: galaxy_install_result
      changed_when: galaxy_install_result.rc == 0
      failed_when: galaxy_install_result.rc != 0
      ignore_errors: true

    # Configuration setup
    - name: Ensure build configs directory exists
      ansible.builtin.file:
        path: "{{ work_dir }}/_build/configs"
        state: directory
        mode: '0755'

    - name: Create ansible.cfg in build context
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ansible.cfg"
        dest: "{{ work_dir }}/_build/configs/ansible.cfg"
        mode: '0644'

    - name: Copy ansible.cfg to system location
      ansible.builtin.copy:
        src: "{{ work_dir }}/_build/configs/ansible.cfg"
        dest: /etc/ansible/ansible.cfg
        mode: '0644'
        remote_src: true
      become: true

    # DNS and connectivity checks
    - name: Verify DNS resolution
      ansible.builtin.command:
        cmd: "nslookup {{ item }}"
      loop:
        - github.com
        - cdn-ubi.redhat.com
        - galaxy.ansible.com
      register: dns_checks
      changed_when: false
      failed_when: false
      loop_control:
        label: "{{ item }}"

    - name: Set DNS servers for Podman
      ansible.builtin.template:
        src: templates/registries.conf.j2
        dest: /etc/containers/registries.conf
        mode: '0644'
        backup: true

    # Environment selection and building
    - name: Include environment menu tasks
      ansible.builtin.include_tasks: tasks/environment_menu.yml
      register: environment_menu_result

    - name: Debug selected environments
      ansible.builtin.debug:
        msg: "Selected environments to process: {{ selected_environments | join(', ') }}"
      when: selected_environments | default([]) | length > 0

    - name: Process each selected environment
      ansible.builtin.include_tasks: tasks/build_environment.yml
      loop: "{{ selected_environments | default([]) }}"
      loop_control:
        loop_var: current_env
        label: "{{ current_env }}"
      when: selected_environments | default([]) | length > 0

    - name: Display completion message
      ansible.builtin.debug:
        msg: |
          âœ… Finished processing all selected environments.
          To use these environments, run: podman images | grep -E '(rhel8|rhel9)'
          To clean up unused images, run: podman image prune -f

  handlers:
    - name: Build container image
      ansible.builtin.debug:
        msg: "Container image {{ current_env }} has been built successfully"

    - name: Handle infra ansible fix
      ansible.builtin.debug:
        msg: "Fixed infra.ansible reference in requirements.yml for {{ current_env }}"
