---
# Optimized Execution Environment Builder

# ==================== 1. INITIALIZATION ==================== #

- name: Initialize critical variables
  ansible.builtin.set_fact:
    playbook_dir: "{{ lookup('env', 'PWD') | default(ansible_env.PWD) }}"
    timestamp: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
    user_home: "{{ lookup('env', 'HOME') }}"
    container_registries: ["registry.redhat.io", "registry.access.redhat.com"]
    authfile: "/etc/containers/auth.json"
    working_dir: "/tmp/ee-containers"
    problematic_collections: []
    rh_username: "{{ lookup('env', 'RH_USERNAME') }}"
    rh_password: "{{ lookup('env', 'RH_PASSWORD') }}"
    paths:
      config: ["~/.ansible/vars", "~/.config/containers", "~/.docker", "/etc/containers"]
      build: [
        "/tmp/ee-containers", "/tmp/ee-containers/_build", "/tmp/ee-containers/context", 
        "/tmp/ee-containers/environments", "/tmp/ee-containers/collections/ansible_collections", 
        "/tmp/ee-containers/hooks", "/tmp/ee-containers/containerfiles",
        "/tmp/ee-containers/_build/configs", "/tmp/ansible_safe", "/tmp/ee-containers/_build/rpms"
      ]
  tags: [always, environment, setup]

# ==================== 2. SYSTEM SETUP ==================== #

- name: Ensure root EE containers directories exist with proper permissions
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0777"  # Ensuring wide permissions for build process
    owner: "{{ lookup('env', 'USER') }}"
    group: "{{ lookup('pipe', 'id -gn') }}"
  loop:
    - "/ee-containers"
    - "/ee-containers/context"
    - "/ee-containers/build"
    - "/tmp/ee-containers"
  become: true
  tags: [always, environment, setup]

- name: Create all required directories
  block:
    - name: Create build directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
        recurse: "{{ 'collections/ansible_collections' in item }}"
      loop: "{{ paths.build }}"
    
    - name: Create configuration directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "{{ '0700' if 'containers' in item or 'docker' in item else '0755' }}"
      loop: "{{ paths.config }}"
      become: "{{ '/etc/' in item }}"
      
    - name: Ensure container config directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "/etc/containers"
        - "/etc/containers/containers.conf.d"
      become: true
  tags: [environment, setup]

- name: Install system dependencies
  block:
    - name: Install compatible resolvelib package
      ansible.builtin.pip:
        name: "resolvelib>=0.5.3,<1.1.0"
        state: present
      become: true
    
    - name: Install system packages
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop: 
        - tmux
        - podman
        - buildah
        - skopeo
        - jq
      become: true
  tags: [always, setup, dependencies]

- name: Install required Ansible collections
  block:
    - name: Install `community.general` collection globally
      ansible.builtin.command:
        cmd: ansible-galaxy collection install community.general --force
      become: true
      tags: [setup, dependencies]

- name: Install `community.general` collection for all contexts
  block:
    - name: Check if community.general is installed globally
      ansible.builtin.shell: ansible-galaxy collection list | grep 'community.general'
      register: global_collection_check
      failed_when: false
      changed_when: false

    - name: Install community.general collection globally
      ansible.builtin.shell: ansible-galaxy collection install community.general --force
      when: global_collection_check.rc != 0

    - name: Check if community.general is installed for current user
      ansible.builtin.shell: ansible-galaxy collection list | grep 'community.general'
      register: user_collection_check
      failed_when: false
      changed_when: false
      become: false

    - name: Install community.general collection for current user
      ansible.builtin.shell: ansible-galaxy collection install community.general --force
      become: false
      when: user_collection_check.rc != 0

    - name: Check if community.general is installed for root user
      ansible.builtin.shell: ansible-galaxy collection list | grep 'community.general'
      register: root_collection_check
      failed_when: false
      changed_when: false
      become: true
      environment:
        HOME: /root

    - name: Install community.general collection for root user
      ansible.builtin.shell: ansible-galaxy collection install community.general --force
      become: true
      environment:
        HOME: /root
      when: root_collection_check.rc != 0
  tags: [setup, dependencies]

# ==================== 3. AUTHENTICATION & CONFIG ==================== #

- name: Setup container registry authentication
  block:
    - name: Ensure ~/.ansible/vars directory exists
      ansible.builtin.file:
        path: "{{ lookup('env', 'HOME') }}/.ansible/vars"
        state: directory
        mode: "0700"
      
    - name: Check if config file exists and load credentials
      block:
        - name: Check config file
          ansible.builtin.stat:
            path: "{{ lookup('env', 'HOME') }}/.ansible/vars/config"
          register: config_file_stat
          
        - name: Load credentials from config
          ansible.builtin.include_vars:
            file: "{{ lookup('env', 'HOME') }}/.ansible/vars/config"
            name: redhat_credentials
          when: config_file_stat.stat.exists
          
        - name: Set credential facts
          ansible.builtin.set_fact:
            rh_username: "{{ redhat_credentials.rh_username | default(rh_username) }}"
            rh_password: "{{ redhat_credentials.rh_password | default(rh_password) }}"
          when: config_file_stat.stat.exists
    
    - name: Check auth status and login if needed
      block:
        - name: Check auth file
          ansible.builtin.stat:
            path: "/etc/containers/auth.json"
          register: auth_file_stat
          become: true
        
        - name: Verify registry authentication status
          ansible.builtin.shell: |
            authenticated=true
            for registry in {{ container_registries | join(' ') }}; do
              if ! grep -q "$registry" "/etc/containers/auth.json" 2>/dev/null; then
                authenticated=false
                break
              fi
            done
            echo $authenticated
          register: auth_status
          changed_when: false
          when: auth_file_stat.stat.exists
        
        - name: Set authentication status fact
          ansible.builtin.set_fact:
            all_registries_logged_in: "{{ auth_file_stat.stat.exists and auth_status.stdout == 'true' }}"
        
        - name: Login to registries if needed
          block:
            - name: Verify credentials are available
              ansible.builtin.set_fact:
                have_credentials: "{{ rh_username != '' and rh_password != '' }}"
            
            - name: Login to container registries
              ansible.builtin.shell: |
                podman login "{{ item }}" \
                  -u "{{ rh_username }}" \
                  -p "{{ rh_password }}" \
                  --authfile "/etc/containers/auth.json"
              loop: "{{ container_registries }}"
              no_log: true
              when: have_credentials | bool
              become: true
            
            - name: Configure auth file for ansible-builder
              ansible.builtin.shell: |
                if [ -f "/etc/containers/auth.json" ]; then
                  mkdir -p ~/.config/containers/
                  cp "/etc/containers/auth.json" ~/.config/containers/auth.json
                  chown {{ lookup('env', 'USER') }}:$(id -gn) ~/.config/containers/auth.json
                  chmod 600 ~/.config/containers/auth.json
                  
                  # Also copy to alternate locations podman might check
                  mkdir -p ~/.docker
                  cp "/etc/containers/auth.json" ~/.docker/config.json
                  chown {{ lookup('env', 'USER') }}:$(id -gn) ~/.docker/config.json
                  chmod 600 ~/.docker/config.json
                  
                  echo "Auth files configured"
                fi
              become: true
          when: not all_registries_logged_in | bool
  tags: [login, registry]

- name: Create ansible.cfg in key locations
  block:
    - name: Ensure directories exist for ansible.cfg
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "/etc/ansible"
        - "/ee-containers"
        - "/ee-containers/context"
        - "/ee-containers/build"
      become: true
      
    - name: Backup existing ansible.cfg files
      block:
        - name: Check for existing files
          ansible.builtin.stat:
            path: "{{ item }}"
          register: ansible_cfg_stat
          with_items:
            - "/etc/ansible/ansible.cfg"
            - "/etc/ansible/ansible.cfg.orig"
          
        - name: Create backup if needed
          ansible.builtin.copy:
            src: "/etc/ansible/ansible.cfg"
            dest: "/etc/ansible/ansible.cfg.orig"
            mode: preserve
            remote_src: yes
          when: 
            - ansible_cfg_stat.results[0].stat.exists
            - not ansible_cfg_stat.results[1].stat.exists
          become: true
    
    - name: Deploy ansible.cfg to all locations
      ansible.builtin.template:
        src: "{{ playbook_dir }}/roles/ee-builder/templates/ansible.cfg.j2"
        dest: "{{ item }}"
        mode: "0644"
      loop:
        - "{{ playbook_dir }}/../ansible.cfg"
        - "/etc/ansible/ansible.cfg"
        - "/ee-containers/ansible.cfg"
        - "/ee-containers/context/ansible.cfg"
        - "/ee-containers/build/ansible.cfg"
      become: "{{ item != playbook_dir ~ '/../ansible.cfg' }}"
  tags: [config, ansible_cfg]

# ==================== 4. NETWORK VALIDATION ==================== #

- name: Validate network connectivity
  block:
    - name: Check critical DNS resolution
      ansible.builtin.command:
        cmd: "nslookup {{ item }}"
      loop:
        - github.com
        - registry.redhat.io
        - galaxy.ansible.com
      register: dns_checks
      changed_when: false
      failed_when: false
      
    - name: Display DNS validation results
      ansible.builtin.debug:
        msg: |
          DNS Resolution Status:
          {% for result in dns_checks.results %}
          - {{ result.item }}: {{ 'OK' if result.rc == 0 else 'FAILED' }}
          {% endfor %}
          {% if dns_checks.results | selectattr('rc', 'ne', 0) | list | length > 0 %}
          WARNING: DNS resolution issues detected which may affect build
          {% endif %}
  tags: [network]

# ==================== 5. ENVIRONMENT SELECTION ==================== #

- name: Select environments to build
  block:
    - name: Get available environments
      ansible.builtin.find:
        paths: "{{ playbook_dir }}/environments"
        file_type: directory
      register: available_environments
      
    - name: Check if environments were found
      ansible.builtin.fail:
        msg: "No environment directories found in {{ playbook_dir }}/environments. Please create at least one environment."
      when: available_environments.files | length == 0

    - name: Generate environment list for display
      ansible.builtin.set_fact:
        environment_list: "{{ available_environments.files | map(attribute='path') | map('basename') | list }}"
        
    - name: Display available environments
      ansible.builtin.debug:
        msg: |
          Available environments:
          {% for env in environment_list %}
          {{ loop.index }}. {{ env }}
          {% endfor %}

    - name: Process user selection
      ansible.builtin.set_fact:
        selected_env: "{{ environment_list | selectattr('loop.index', 'in', user_selection.split(',')) | list }}"
  tags: [environment, menu]

# ==================== 6. PREPARE ENVIRONMENTS ==================== #

- name: Prepare environment directories
  block:
    - name: Create and set permissions on environment directories
      ansible.builtin.file:
        path: "{{ working_dir }}/environments/{{ item }}"
        state: directory
        mode: "0777"
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('pipe', 'id -gn') }}"
      loop: "{{ selected_env }}"
      become: true
    
    - name: Copy selected environments to /tmp/ee-containers/environments
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/environments/{{ item }}"
        dest: "/tmp/ee-containers/environments/{{ item }}"
        remote_src: yes
      loop: "{{ selected_env }}"
      tags: [environment, setup]

- name: Install Galaxy collections
  block:
    - name: Install core Galaxy collections
      ansible.builtin.command: "ansible-galaxy collection install {{ item }} --force"
      register: galaxy_install
      changed_when: galaxy_install.rc == 0
      failed_when: false
      loop:
        - community.general
        - ansible.posix
        - ansible.utils
      
    - name: Create requirements template with safe collections
      ansible.builtin.copy:
        dest: "/tmp/ee-containers/safe_requirements.yml"
        content: |
          ---
          collections:
            - name: ansible.utils
            - name: ansible.posix
            - name: community.general
        mode: "0644"
  tags: [setup, dependencies]

# ==================== 7. FIX AND CONFIGURE ENVIRONMENTS ==================== #

- name: Fix environment files
  block:
    - name: Create fix script
      ansible.builtin.copy:
        dest: "{{ working_dir }}/fix_environments.sh"
        content: |
          #!/bin/bash
          # Script to fix environment configuration files
          WORKING_DIR="{{ working_dir }}"
          for env in $@; do
            echo "Processing environment: $env"
            # Add your fix logic here
          done
        mode: "0755"

    - name: Run fix script
      ansible.builtin.command:
        cmd: "{{ working_dir }}/fix_environments.sh {{ selected_env | join(' ') }}"
      register: fix_env_files
      changed_when: true

# ==================== 8. BUILD MONITORING ==================== #

- name: Launch tmux session for build monitoring
  block:
    - name: Kill existing tmux session if it exists
      ansible.builtin.shell: tmux has-session -t ansible_build_monitor 2>/dev/null && tmux kill-session -t ansible_build_monitor || true
      changed_when: false
      ignore_errors: true

    - name: Create tmux session with split panes
      ansible.builtin.shell: |
        tmux new-session -d -s ansible_build_monitor -n "Build Monitor"
        tmux send-keys -t ansible_build_monitor:0.0 'clear && echo -e "\033[1;33m========= Ansible DE/EE Build Monitor =========\033[0m"' C-m
        tmux send-keys -t ansible_build_monitor:0.0 'echo -e "\033[1;36m" && cat << "EOF"
        █████╗ ███╗   ██╗███████╗██╗███████╗██╗     ███████╗
        ██╔══██╗████╗  ██║██╔════╝██║██╔════╝██║     ██╔════╝
        ███████║██╔██╗ ██║███████╗██║█████╗  ██║     █████╗  
        ██╔══██║██║╚██╗██║╚════██║██║██╔══╝  ██║     ██╔══╝  
        ██║  ██║██║ ╚████║███████║██║███████╗███████╗███████╗
        ╚═╝  ╚═╝╚═╝  ╚═══╝╚══════╝╚═╝╚══════╝╚══════╝╚══════╝
        EOF' C-m
        tmux send-keys -t ansible_build_monitor:0.0 'echo -e "\033[1;33mMonitoring Podman Images...\033[0m"' C-m
        tmux send-keys -t ansible_build_monitor:0.0 'watch -n 0.05 podman images' C-m
        tmux split-window -h -t ansible_build_monitor:0
        tmux send-keys -t ansible_build_monitor:0.1 'clear && echo -e "\033[1;33m========= Building Environment: {{ working_dir }}/environment =========\033[0m"' C-m
        tmux send-keys -t ansible_build_monitor:0.1 'tail -f {{ working_dir }}/build.log' C-m
      changed_when: false

    - name: Attach to tmux session
      ansible.builtin.shell: |
        if command -v gnome-terminal &>/dev/null; then
          gnome-terminal -- bash -c "tmux attach-session -t ansible_build_monitor || echo 'Failed to attach'; read -p 'Press enter to close'"
        elif command -v xterm &>/dev/null; then
          xterm -e "tmux attach-session -t ansible_build_monitor || echo 'Failed to attach'; read -p 'Press enter to close'"
        fi
      async: 10
      poll: 0
      ignore_errors: true
      when: ansible_connection == 'local'

    - name: Display tmux connection instructions
      ansible.builtin.debug:
        msg: |
          Tmux monitoring session created!
          
          To connect to this session:
            tmux attach-session -t ansible_build_monitor
          
          To detach from the session once connected: 
            Press Ctrl+b, then d
  tags: [monitoring]

- name: Execute builds
  block:
    - name: Check for existing images
      ansible.builtin.command:
        cmd: "podman images -q {{ item }}"
      register: image_exists
      changed_when: false
      become: true
      loop: "{{ selected_env }}"
      
    - name: Run ansible-builder for each environment
      ansible.builtin.shell: |
        export REGISTRY_AUTH_FILE={{ authfile }}
        export EE_BUILDER_HOOKS_DIR={{ working_dir }}/hooks
        
        tmux send-keys -t ansible_build:0.0 "cd {{ playbook_dir }} && \
          REGISTRY_AUTH_FILE={{ authfile }} \
          EE_BUILDER_HOOKS_DIR={{ working_dir }}/hooks \
          ansible-builder build --prune-images --no-cache -v3 \
          -f environments/{{ item.item }}/execution-environment.yml \
          --context {{ working_dir }} \
          --tag {{ item.item }} 2>&1 | tee /tmp/ee-build-{{ item.item }}.log" C-m
      loop: "{{ image_exists.results }}"
      when: item.stdout == ""
      register: build_started
      changed_when: true
      environment:
        REGISTRY_AUTH_FILE: "{{ authfile }}"
        EE_BUILDER_HOOKS_DIR: "{{ working_dir }}/hooks"
      
    - name: Wait for builds to complete
      ansible.builtin.pause:
        prompt: |
          Build process started in tmux session.
          
          You can view the build progress by connecting to the tmux session:
            tmux attach-session -t ansible_build
          
          Press ENTER when the build is complete to continue with cleanup tasks.
      when: build_started.changed
  tags: [build]

# ==================== 9. POST-BUILD TASKS ==================== #

- name: Verify build results and cleanup
  block:
    - name: Check built images
      ansible.builtin.shell: |
        podman images --format {% raw %}'{{.Repository}}:{{.Tag}}'{% endraw %} | grep -v '<none>'
      register: final_images
      changed_when: false
      
    - name: Cleanup build artifacts
      block:
        - name: Remove dangling images
          ansible.builtin.shell: |
            podman image prune -f
          register: dangling_removal
          changed_when: dangling_removal.stdout != ""
          failed_when: false
          become: true
          
        - name: Remove <none> tagged images explicitly
          ansible.builtin.shell: |
            podman image ls -a | grep '<none>' | awk '{print $3}' | xargs --no-run-if-empty podman rmi -f
          register: none_image_removal
          changed_when: "'deleted' in none_image_removal.stdout or 'untagged' in none_image_removal.stdout"
          failed_when: false
          become: true
      when: cleanup_enabled | default(true)
      
    - name: Display build results
      ansible.builtin.debug:
        msg: |
          Build process completed.
          
          Available images:
          {{ final_images.stdout_lines | join('\n') }}
          
          Built environments:
          {% for env in selected_env %}
          - {{ env }}
          {% endfor %}
  tags: [cleanup, build]

- name: Generate build report
  block:
    - name: Create report directory
      ansible.builtin.file:
        path: "{{ playbook_dir }}/reports"
        state: directory
        mode: '0755'
      
    - name: Gather system and image information
      block:
        - name: Get system information
          ansible.builtin.shell: |
            echo "$(whoami)@$(hostname)"
          register: system_info
          changed_when: false
          
        - name: Get podman image details
          ansible.builtin.shell: |
            podman images --format '{"Repository":"{{.Repository}}","Tag":"{{.Tag}}","ID":"{{.ID}}","Size":"{{.Size}}","Created":"{{.CreatedAt}}"}' | jq -s .
          register: podman_images_json
          changed_when: false
          ignore_errors: true
      
    - name: Generate and display report
      block:
        - name: Generate HTML report
          ansible.builtin.template:
            src: "{{ playbook_dir }}/roles/ee-builder/templates/report_template.html.j2"
            dest: "{{ playbook_dir }}/reports/ee-build-report-{{ timestamp }}.html"
          ignore_errors: true
          
        - name: Show report location
          ansible.builtin.debug:
            msg: |
              HTML Report has been generated!
              
              You can view it at: {{ playbook_dir }}/reports/ee-build-report-{{ timestamp }}.html
          
        - name: Open HTML report in browser
          ansible.builtin.shell: |
            if [ -n "$DISPLAY" ]; then
              for cmd in xdg-open firefox chromium-browser google-chrome; do
                if command -v $cmd > /dev/null; then
                  $cmd "{{ playbook_dir }}/reports/ee-build-report-{{ timestamp }}.html" &> /dev/null &
                  break
                fi
              done
            fi
          async: 10
          poll: 0
          ignore_errors: true
  tags: [report]

- name: Fix execution environment file errors
  block:
    - name: Create repair script for execution-environment.yml files
      ansible.builtin.copy:
        dest: "{{ working_dir }}/fix_ee_files.sh"
        content: |
          #!/bin/bash
          # Fix common errors in execution-environment.yml files
          
          fix_file() {
            local file="$1"
            echo "Fixing file: $file"
            
            # Create a backup
            cp "$file" "${file}.bak"
            
            # 1. Move galaxy pre_releases from options to build_arg_defaults
            if grep -q "options:" "$file" && grep -q "galaxy:" "$file" && grep -q "pre_releases:" "$file"; then
              # Remove galaxy section from options
              sed -i '/options:/,/^[^ ]/ {
                /galaxy:/,/pre_releases:/ {
                  /pre_releases:/d
                  /collections:/d
                  /galaxy:/d
                }
              }' "$file"
              
              # Add --pre flag to ANSIBLE_GALAXY_CLI_COLLECTION_OPTS
              if grep -q "ANSIBLE_GALAXY_CLI_COLLECTION_OPTS:" "$file"; then
                sed -i 's/ANSIBLE_GALAXY_CLI_COLLECTION_OPTS: .*/ANSIBLE_GALAXY_CLI_COLLECTION_OPTS: "--pre"/' "$file"
              else
                # If build_arg_defaults exists, add to it
                if grep -q "build_arg_defaults:" "$file"; then
                  sed -i '/build_arg_defaults:/a\  ANSIBLE_GALAXY_CLI_COLLECTION_OPTS: "--pre"' "$file"
                else
                  # Otherwise create the section
                  sed -i '1a\build_arg_defaults:\n  ANSIBLE_GALAXY_CLI_COLLECTION_OPTS: "--pre"' "$file"
                fi
              fi
            fi
            
            # 2. Fix space after colon for base image name if needed
            sed -i 's/: atest/:latest/g' "$file"
            
            # 3. Fix indentation issues in dependencies section
            if grep -q "galaxy: requirements.yml" "$file" && grep -q "collections:" "$file"; then
              # Fix improper indentation of collections under galaxy
              sed -i '/dependencies:/,/^[^ ]/ {
                /galaxy: requirements.yml/,/^[ ]*[^ ]/ {
                  s/^      collections:/  galaxy: requirements.yml/
                  /pre_releases:/d
                }
              }' "$file"
            fi
            
            # 4. Validate YAML syntax
            if command -v python3 &>/dev/null; then
              if ! python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
                echo "YAML still invalid in $file, restoring back
