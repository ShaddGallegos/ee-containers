---
# Setup tasks for the ee-builder role

# 1. VARIABLE VALIDATION
- name: Validate required variables
  ansible.builtin.assert:
    that:
      - work_dir is defined
      - required_system_packages is defined
      - required_pip_packages is defined
    fail_msg: "Required variables are missing. Please ensure work_dir, required_system_packages, and required_pip_packages are defined."

# 2. DIRECTORY STRUCTURE SETUP (consolidated)
- name: Create all required directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode | default('0755') }}"
    recurse: "{{ item.recurse | default(false) }}"
  loop:
    - { path: "{{ work_dir }}/_build/configs" }
    - { path: "/tmp/ansible_safe" }
    - { path: "/tmp/ee-containers" }
    - { path: "/tmp/ee-containers/_build" }
    - { path: "/tmp/ee-containers/context" }
    - { path: "/tmp/ee-containers/environments" }
    - { path: "/tmp/ee-containers/collections/ansible_collections", recurse: true }
    - { path: "~/.docker", mode: "0700" }
    - { path: "~/.config/containers", mode: "0700" }
    - { path: "/etc/containers", become: true }
  become: "{{ item.become | default(false) }}"

# 3. SYSTEM PACKAGE MANAGEMENT
- name: Gather package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Install required system packages
  ansible.builtin.package:
    name: "{{ required_system_packages | difference(ansible_facts.packages.keys() | list) }}"
    state: present
  when: (required_system_packages | difference(ansible_facts.packages.keys() | list)) | length > 0
  become: true

# 4. PYTHON ENVIRONMENT SETUP
- name: Update pip and install required Python packages
  ansible.builtin.pip:
    name: "{{ item }}"
    state: "{{ 'latest' if item == 'pip' else 'present' }}"
    extra_args: "--upgrade"
  loop: 
    - pip
    - "{{ required_pip_packages }}"
  become: true
  register: pip_install_result
  retries: 3
  delay: 5
  until: pip_install_result is succeeded

# 5. CONFIGURATION FILES (consolidated)
- name: Load user configuration
  ansible.builtin.include_vars:
    file: "~/.ansible/vars/config"
    name: config_vars
  ignore_errors: true

- name: Create configuration files
  ansible.builtin.template:
    src: "{{ role_path }}/templates/{{ item.template }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode | default('0644') }}"
    backup: "{{ item.backup | default(false) }}"
  loop:
    - { template: "ansible.cfg.j2", dest: "/tmp/ee-containers/ansible.cfg" }
    - { template: "ansible.cfg.j2", dest: "{{ playbook_dir }}/ansible.cfg" }
    - { template: "registries.conf.j2", dest: "/etc/containers/registries.conf", backup: true, become: true }
  vars:
    ansible_vars: "{{ config_vars | default({}) }}"
    rh_username: "{{ config_vars.rh_username | default('') }}"
    rh_password: "{{ config_vars.rh_password | default('') }}"
    rh_token: "{{ config_vars.rh_token | default('') }}"
    ah_token: "{{ config_vars.ah_token | default('') }}"
  become: "{{ item.become | default(false) }}"
  ignore_errors: true

# 6. GALAXY COLLECTION INSTALLATION
- name: Create Galaxy requirements file
  ansible.builtin.copy:
    dest: "/tmp/ansible_safe/requirements.yml"
    content: |
      ---
      collections:
        - name: ansible.posix
          version: '>=1.0.0'
        - name: community.general
          version: '7.5.0'
    mode: '0644'

- name: Install Galaxy collections
  ansible.builtin.command: 
    cmd: "ansible-galaxy collection install -r /tmp/ansible_safe/requirements.yml --force -p /tmp/ee-containers/collections"
  environment:
    ANSIBLE_CONFIG: "/tmp/ansible_safe/ansible.cfg"
  register: galaxy_install
  failed_when: false
  changed_when: galaxy_install.rc == 0
  retries: 2
  delay: 3
  until: galaxy_install is succeeded or galaxy_install.attempts | default(1) > 1

- name: Show Galaxy installation results
  ansible.builtin.debug:
    msg: "{{ 'Galaxy installation succeeded' if galaxy_install.rc == 0 else 'Galaxy installation failed - will attempt direct download' }}"

# 7. ENVIRONMENT PREPARATION
- name: Copy environments to working directory
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/environments/"
    dest: "/tmp/ee-containers/environments/"
    directory_mode: true
    remote_src: true
  failed_when: false

# 8. NETWORK VALIDATION
- name: Verify critical DNS resolution
  ansible.builtin.command:
    cmd: "nslookup {{ item }}"
  loop:
    - github.com
    - registry.redhat.io
    - galaxy.ansible.com
  register: dns_checks
  changed_when: false
  failed_when: false

- name: Display DNS validation results
  ansible.builtin.debug:
    msg: |
      DNS Resolution Status:
      {% for result in dns_checks.results %}
      - {{ result.item }}: {{ 'OK' if result.rc == 0 else 'FAILED' }}
      {% endfor %}

# Clean up dangling (<none>:<none>) images after build
- name: Remove dangling images after build
  ansible.builtin.shell: |
    podman image ls -a | grep '<none>' | awk '{print $3}' | xargs -r podman rmi -f || true
  register: dangling_removal
  changed_when: dangling_removal.stdout != ""
  failed_when: false
  become: true
  ignore_errors: true

# Fix permissions on working directory
- name: Fix permissions on working directory
  ansible.builtin.file:
    path: "{{ playbook_dir }}"
    mode: '0755'
  become: true
  ignore_errors: true

