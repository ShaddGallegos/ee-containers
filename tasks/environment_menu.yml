---
- name: Find execution environment directories
  ansible.builtin.find:
    paths: "{{ playbook_dir }}/environments"
    file_type: directory
  register: environment_dirs

- name: Extract environment names
  ansible.builtin.set_fact:
    all_environments: "{{ environment_dirs.files | map(attribute='path') | map('basename') | list | sort }}"

- name: Filter environments based on naming patterns
  ansible.builtin.set_fact:
    filtered_environments: "{{ all_environments | select('match', '.*rhel*.*(ee|de).*|(ee|de).*rhel*.*') | list | sort }}"

- name: Create combined prompt
  ansible.builtin.set_fact:
    environment_prompt: |
      **************************************************
            Available environments:
      {% for env_name in filtered_environments %}
      {{ loop.index }}. {{ env_name }}
      {% endfor %}

      **************************************************

      Enter numbers for environments to build (comma-separated, max {{ filtered_environments | length }})

- name: Prompt for environment selection
  ansible.builtin.pause:
    prompt: "{{ environment_prompt }}"
  register: environment_selection

- name: Handle environment selection
  ansible.builtin.set_fact:
    selection_is_all: "{{ environment_selection.user_input | trim | lower == 'all' }}"
    selection_string: "{{ environment_selection.user_input | trim }}"

- name: Set selected environments when 'all' is chosen
  ansible.builtin.set_fact:
    selected_environments: "{{ filtered_environments }}"
  when: selection_is_all | bool

- name: Parse selections for numeric input
  ansible.builtin.set_fact:
    selection_numbers: "{{ selection_string.split(',') | map('trim') | map('int') | list }}"
  when: not selection_is_all | bool

- name: Map selections to environments
  ansible.builtin.set_fact:
    selected_environments: "{{ filtered_environments | list_indexer(selection_numbers) }}"
  when: not selection_is_all | bool

- name: Validate selections
  ansible.builtin.assert:
    that:
      - selection_is_all | bool or (selection_numbers | min > 0 and selection_numbers | max <= filtered_environments | length)
    fail_msg: "Invalid selection. Choose numbers between 1 and {{ filtered_environments | length }} or 'all'"
    success_msg: "Valid selection: {{ selected_environments | join(', ') }}"
  when: selection_string != ""

- name: Show selected environments
  ansible.builtin.debug:
    msg: "Selected environments: {{ selected_environments | join(', ') }}"
  when: selected_environments is defined and selected_environments | length > 0

- name: Debug selected environments
  ansible.builtin.debug:
    var: selected_environments
    verbosity: 0
